*** ./src/backend/access/gist/gistproc.c.orig	Thu Jul  5 22:35:59 2007
--- ./src/backend/access/gist/gistproc.c	Fri Jul  6 16:03:22 2007
***************
*** 21,33 ****
  #include "utils/geo_decls.h"
  
  
- typedef struct
- {
- 	BOX		   *key;
- 	int			pos;
- } KBsort;
- 
- static int	compare_KB(const void *a, const void *b);
  static bool gist_box_leaf_consistent(BOX *key, BOX *query,
  						 StrategyNumber strategy);
  static double size_box(Datum dbox);
--- 21,26 ----
***************
*** 194,215 ****
  	PG_RETURN_POINTER(result);
  }
  
- /*
-  * qsort comparator for box areas
-  */
- static int
- compare_KB(const void *a, const void *b)
- {
- 	BOX		   *abox = ((const KBsort *) a)->key;
- 	BOX		   *bbox = ((const KBsort *) b)->key;
- 	double		sa = (abox->high.x - abox->low.x) * (abox->high.y - abox->low.y);
- 	double		sb = (bbox->high.x - bbox->low.x) * (bbox->high.y - bbox->low.y);
- 
- 	if (sa == sb)
- 		return 0;
- 	return (sa > sb) ? 1 : -1;
- }
- 
  static void
  chooseLR(GIST_SPLITVEC *v,
  		 OffsetNumber *list1, int nlist1, BOX *union1,
--- 187,192 ----
***************
*** 417,460 ****
  			ADDLIST(listT, unionT, posT, i);
  	}
  
! 	/* bad disposition, sort by ascending and resplit */
! 	if ((posR == 0 || posL == 0) && (posT == 0 || posB == 0))
  	{
! 		KBsort	   *arr = (KBsort *) palloc(sizeof(KBsort) * maxoff);
  
- 		posL = posR = posB = posT = 0;
  		for (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))
  		{
! 			arr[i - 1].key = DatumGetBoxP(entryvec->vector[i].key);
! 			arr[i - 1].pos = i;
  		}
! 		qsort(arr, maxoff, sizeof(KBsort), compare_KB);
  		for (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))
  		{
! 			cur = arr[i - 1].key;
! 			if (cur->low.x - pageunion.low.x < pageunion.high.x - cur->high.x)
! 				ADDLIST(listL, unionL, posL, arr[i - 1].pos);
! 			else if (cur->low.x - pageunion.low.x == pageunion.high.x - cur->high.x)
  			{
  				if (posL > posR)
! 					ADDLIST(listR, unionR, posR, arr[i - 1].pos);
  				else
! 					ADDLIST(listL, unionL, posL, arr[i - 1].pos);
  			}
  			else
! 				ADDLIST(listR, unionR, posR, arr[i - 1].pos);
  
! 			if (cur->low.y - pageunion.low.y < pageunion.high.y - cur->high.y)
! 				ADDLIST(listB, unionB, posB, arr[i - 1].pos);
! 			else if (cur->low.y - pageunion.low.y == pageunion.high.y - cur->high.y)
  			{
  				if (posB > posT)
! 					ADDLIST(listT, unionT, posT, arr[i - 1].pos);
  				else
! 					ADDLIST(listB, unionB, posB, arr[i - 1].pos);
  			}
! 			else
! 				ADDLIST(listT, unionT, posT, arr[i - 1].pos);
  		}
  	}
  
--- 394,449 ----
  			ADDLIST(listT, unionT, posT, i);
  	}
  
! #define LIMIT_RATIO	0.2
! #define _IS_BADRATIO(x,y)	( (y) == 0 || (float)(x)/(float)(y) < LIMIT_RATIO )
! #define IS_BADRATIO(x,y) ( _IS_BADRATIO((x),(y)) || _IS_BADRATIO((y),(x)) )
! 	/* bad disposition, try to split by centers of boxes  */
! 	if ( IS_BADRATIO(posR, posL) && IS_BADRATIO(posT, posB) )
  	{
! 		double	avgCenterX=0.0, avgCenterY=0.0;
! 		double	CenterX, CenterY;
  
  		for (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))
  		{
! 			cur = DatumGetBoxP(entryvec->vector[i].key);
! 			avgCenterX +=  ((double)cur->high.x + (double)cur->low.x)/2.0;
! 			avgCenterY +=  ((double)cur->high.y + (double)cur->low.y)/2.0;
  		}
! 
! 		avgCenterX /= maxoff;
! 		avgCenterY /= maxoff;
! 
! 		posL = posR = posB = posT = 0;
  		for (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))
  		{
! 			cur = DatumGetBoxP(entryvec->vector[i].key);
! 			
! 			CenterX =  ((double)cur->high.x + (double)cur->low.x)/2.0;
! 			CenterY =  ((double)cur->high.y + (double)cur->low.y)/2.0;
! 
! 			if (CenterX < avgCenterX) 
! 				ADDLIST(listL, unionL, posL, i);
! 			else if (CenterX == avgCenterX)
  			{
  				if (posL > posR)
! 					ADDLIST(listR, unionR, posR, i);
  				else
! 					ADDLIST(listL, unionL, posL, i);
  			}
  			else
! 				ADDLIST(listR, unionR, posR, i);
  
! 			if (CenterY < avgCenterY)
! 				ADDLIST(listB, unionB, posB, i);
! 			else if (CenterY == avgCenterY)
  			{
  				if (posB > posT)
! 					ADDLIST(listT, unionT, posT, i);
  				else
! 					ADDLIST(listB, unionB, posB, i);
  			}
! 			else 
! 				ADDLIST(listT, unionT, posT, i);
  		}
  	}
  
